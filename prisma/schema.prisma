generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String?           @unique
  password         String
  role             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  contacts         Contact[]
  requestedIn      EmployerRequest[] @relation("RequestedCandidate")
  employerRequests EmployerRequest[] @relation("SelectedUser")
  profile          Profile?
}

model Profile {
  id              Int          @id @default(autoincrement())
  userId          Int          @unique
  skills          String?
  photo           String?
  gender          String?
  experience      String?
  jobCategoryId   Int?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  dateOfBirth     DateTime?
  description     String?
  firstName       String
  idNumber        String?
  lastName        String
  references      String?
  city            String?
  contactNumber   String
  country         String?
  location        String?
  maritalStatus   String?
  monthlyRate     String?
  availability    String?
  certifications  String?
  educationLevel  String?
  languages       String?
  experienceLevel String?
  jobCategory     JobCategory? @relation(fields: [jobCategoryId], references: [id])
  user            User         @relation(fields: [userId], references: [id])
}

model EmployerRequest {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String
  message              String?
  selectedUserId       Int?
  createdAt            DateTime  @default(now())
  priority             String    @default("normal")
  status               String    @default("pending")
  updatedAt            DateTime  @updatedAt
  companyName          String?
  phoneNumber          String?
  requestedCandidateId Int?
  requestedCandidate   User?     @relation("RequestedCandidate", fields: [requestedCandidateId], references: [id])
  selectedUser         User?     @relation("SelectedUser", fields: [selectedUserId], references: [id])
  messages             Message[]
}

model Message {
  id                Int             @id @default(autoincrement())
  employerRequestId Int
  fromAdmin         Boolean
  employerEmail     String
  content           String
  createdAt         DateTime        @default(now())
  attachmentName    String?
  attachmentUrl     String?
  isRead            Boolean         @default(false)
  messageType       String          @default("text")
  readAt            DateTime?
  updatedAt         DateTime        @updatedAt
  employerRequest   EmployerRequest @relation(fields: [employerRequestId], references: [id])
}

model Contact {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String
  subject              String
  message              String
  status               String    @default("unread")
  priority             String    @default("normal")
  category             String    @default("general")
  adminResponse        String?
  adminResponseSubject String?
  respondedBy          Int?
  respondedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  admin                User?     @relation(fields: [respondedBy], references: [id])
}

model JobCategory {
  id        Int       @id @default(autoincrement())
  name_en   String
  name_rw   String
  createdAt DateTime  @default(now())
  profiles  Profile[]
}
